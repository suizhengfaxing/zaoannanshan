"use strict"; window.DEBUG = !1, $.fn.$on = Bacon.$.asEventStream, window.$storage = $(window).$on("storage"); function createApplication() { return { $property: observableProperty, property: function (a, b) { Object.defineProperty(this, a, b) } } } function observableProperty(a) { let b, c, d = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}, e = this, f = d.init, g = d.key || a, h = "local" == d.store ? localStorage : "session" == d.store ? sessionStorage : void 0, i = () => JSON.parse(h.getItem(g)) || f, j = d.get || h && i || (() => f), k = d.set || h && (a => a === void 0 ? h.removeItem(g) : h.setItem(g, JSON.stringify(a))) || (a => { f = a }); e[`$${a}`] = Bacon.fromBinder(a => { b = a; let c = j(); c != null && null != c && b(c) }).toProperty().doDebugLog(`$${a}`), d.changing && (e[`$${a}Changing`] = Bacon.fromBinder(a => { c = a }).doDebugLog(`$${a}Changing`)), Object.defineProperty(e, a, { get: j, set: a => { c && c(j()), k(a), b && b(a) } }), h && $storage.filter(a => a.key == g).forEach(a => b && b(a.newValue)) } window.$fetch = function (a) { let b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}; return b.headers = b.headers || {}, b.headers["Content-Type"] = b.headers["Content-Type"] || "application/json", Bacon.fromBinder(c => { fetch(a, b).then(a => a.ok ? a.json() : void (c(new Bacon.Error(a.status)), c(new Bacon.End))).then(a => { c(a), c(new Bacon.End) }).catch(a => { DEBUG && console.log(a), c(new Bacon.Error(a)), c(new Bacon.End) }) }).name(`fetch:${a}`) }, Bacon.Observable.prototype.falsy = function () { return this.filter(a => !a || $.isArray(a) && !a.length) }, Bacon.Observable.prototype.notFalsy = function () { return this.filter(a => !!a && (!$.isArray(a) || !!a.length)) }, Bacon.Observable.prototype.preventDefault = function () { return this.doAction(a => a.preventDefault()) }, Bacon.Observable.prototype.doDebugLog = function (a) { return this.doAction(b => DEBUG && console.log(a, b)) }, Array.prototype.uniqueBy = function (a) { return this.filter((b, c) => this.findIndex(c => c[a] == b[a]) == c) }, Array.prototype.sortBy = function (a, b) { return this.sort((c, d) => b ? c[a] > d[a] : c[a] < d[a]) }, Array.prototype.without = function () { for (var a = arguments.length, b = Array(a), c = 0; c < a; c++)b[c] = arguments[c]; return this.filter($.isFunction(b[0]) ? a => !b[0](a) : a => !b.includes(a)) }; function competeTwo(a, b, c, d) { return a.concat(b || []).reduce((a, b) => { let e = a.find(a => a[c] == b[c]); return e ? (e[d] < b[d] && (e[d] = b[d]), a) : a.concat(b) }, []) } String.prototype.kebabCase = function () { return this.replace(/_/g, "-").replace(/([A-Z])/g, a => "-" + a.toLowerCase()) }, String.prototype.snakeCase = function () { return this.replace(/-/g, "_").replace(/([A-Z])/g, a => "_" + a.toLowerCase()) }; const todayString = () => new Date().toDateString(), yesterdayString = () => new Date(new Date - 86400000).toDateString(); window.displayDate = a => { a = new Date(a); let b = a.toDateString(); return todayString() == b ? "今天" : yesterdayString() == b ? "昨天" : [a.getFullYear(), (a.getMonth() + 1 + "").padStart(2, "0"), (a.getDate() + "").padStart(2, "0")].join("-") }, window.now = () => new Date().toISOString(), $.fn.uiHide = function () { return this.addClass("uk-hidden") }, $.fn.uiShow = function () { return this.removeClass("uk-hidden") }, $.fn.uiToggle = function (a) { return a ? this.uiShow() : this.uiHide() }, window.app = createApplication(), app.$property("lastReading", { store: "local" }), app.$property("readingProgress", { store: "local" }), app.$property("offline", { store: "local" }); let readerLinkRegex = /\/reader\/(\w+)\/?$/i; $(document).$on("click", "a[href]").forEach(a => { let b = a.currentTarget.href; if (b && readerLinkRegex.test(b)) { let c = b.match(readerLinkRegex)[1], d = app.readingProgress.find(a => a.id == c); d && (a.preventDefault(), location.href = `/reader/${d.id}/${d.juan}#${d.scrollRef}`) } }), app.$scroll = $(window).$on("scroll").debounce(1e3), app.$beacon = app.$scroll.throttle(1e3 * (DEBUG ? 1 : 60)), app.$firstBeacon = app.$beacon.first(), app.$applaud = new Bacon.Bus, [[app.$beacon, "minute_read"], [app.$applaud, "applaud"]].forEach(a => { let [b, c] = a; b.filter(() => !DEBUG && app.eventTitle).forEach(() => { plausible(c, { props: { book: app.eventTitle } }) }) }), app.enableCollectingEvent = a => { app.eventTitle = a }, $(() => { function a(a) { let [d, e] = `${a}`.split("."); if (e = parseInt(e) || 0, "9999z99" == d) return document.body.clientHeight; else { let a = b(d), { index: f } = c.reduce((c, d, e) => { let { distance: f, index: g } = c, { number: h } = d, i = a - b(h); return null == f || 0 <= i && i < f ? { distance: i, index: e } : { distance: f, index: g } }); console.log(c[f]); let g = e ? (c[f + 1].offset - c[f].offset) * e / 100 : -132; return c[f].offset + g } } function b(a) { return 1e4 * parseInt(a.substring(0, 4)) + 100 * (a.charCodeAt(4) - 97) + parseInt(a.substring(5)) } window.computeLineNumbers = () => { let a = Array.from(document.querySelectorAll("[line]")).map(a => ({ number: a.getAttribute("line"), offset: a.offsetTop })); return DEBUG && ($(".line-debug").remove(), a.forEach(a => { $(`<div class="line-debug">${a.number}</div>`).css("top", a.offset).appendTo("body") })), a.unshift({ number: "0000a00", offset: -1 }), a.push({ number: "9999z99", offset: document.body.clientHeight }), a }; let c = computeLineNumbers(); window.computeScrollRef = () => { let a = window.pageYOffset; if (100 > a) return "0000a00.00"; for (let b = 1; b < c.length; b++)if (c[b - 1].offset < a && c[b].offset >= a) { let d = Math.round(100 * ((a - c[b - 1].offset) / (c[b].offset - c[b - 1].offset))); return 100 <= d ? d = 99 : 10 > d && (d = `0${d}`), `${c[b - 1].number}.${d}` } return "9999z99.99" }, $(window).$on("resize").debounce(1e3).forEach(() => { c = computeLineNumbers(), DEBUG && console.log("line numbers re-computed") }), window.scrollToRef = b => { let c = a(b); DEBUG && console.log(`scrollToRef: Y = ${c}`), 0 <= navigator.userAgent.indexOf("Gecko") ? window.scroll(0, c) : window.scroll({ behavior: "smooth", top: c }) }, window.needScrollToRef = b => { let c = a(b); return 600 < Math.abs(c - window.pageYOffset) } }), $(() => { let a, b; app.enableQRcodeSharing = function () { let c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : "", d = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : ""; a = d, c.startsWith("/") || (c = "/" + c), b = `https://deerpark.app${c}`, new QRCode(document.getElementById("qrcode"), b) }, $(document).$on("click", ".dp-share").preventDefault().filter(() => !!navigator.share && b).forEach(() => { navigator.share({ title: a, url: b }) }) }); const CACHENAME = "reader"; $(function () { const a = /iPhone|iPad|iPod|Mac/i.test(navigator.platform); a && $("html").addClass("apple"); const c = $("html").attr("bookid"), d = $("html").attr("juan"), e = $("h1").first().text(); $("#nav_home").click(() => { location.href = "/zaoannanshan" }); const f = document.querySelector("#body").childNodes[0]; if (f.nodeType == Node.TEXT_NODE) { const a = f.textContent; f.remove(), $("<p class=\"first-line\"></p>").text(a).prependTo("#body") } $(".lg-row").each(function () { let a = $(this); (a.text().startsWith("「") || a.text().startsWith("『")) && a.addClass("hang") }), $(window).$on("hashchange").map(() => location.hash).startWith(location.hash).map(a => a.substr(1)).notFalsy().doDebugLog("scrolling to hash").forEach(a => { UIkit.offcanvas("#work_menu").hide(), scrollToRef(a), history.replaceState(null, "", `/reader/${c}/${d}`) }), $("#search_dialog form").$on("submit").preventDefault().forEach(() => { let a = $("#search_dialog input").val().trim(); location.href = `/fullsearch/${c}/#${encodeURIComponent(a)}` }), $(".dp-offline").$on("click").preventDefault().forEach(() => { UIkit.modal("#offline_dialog").hide(), app.offline = (app.offline || []).without(a => a.id == c).concat({ id: c, title: e, juans: $("html").attr("juans").split(",") }) }), app.$offline.forEach(a => { for (let c of a || []) for (let a of c.juans) { let b = `/reader/${c.id}/${a}`; caches.match(b).then(a => a || caches.open(CACHENAME).then(a => a.add(b))) } }), app.$offline.map(a => !!a.find(a => a.id == c)).forEach(a => { $(".dp-offline-on").uiToggle(!a), $(".dp-offline-off").uiToggle(a) }), $(".dp-offline-off").$on("click").preventDefault().forEach(() => { app.offline = app.offline.without(a => a.id == c) }), app.$scroll.map(computeScrollRef).doDebugLog("scrollref").forEach(a => { let b = (app.readingProgress || []).without(a => a.id == c); b = b.concat({ id: c, juan: d, scrollRef: a, date: now() }), app.readingProgress = b }), app.$firstBeacon.onValue(() => { app.lastReading = { id: c } }), app.enableCollectingEvent(`${c} ${e}`), app.enableQRcodeSharing(`/reader/${c}`, e) });